// Code generated by protoc-gen-zig
///! package tests
const std = @import("std");
const Allocator = std.mem.Allocator;
const ArrayListU = std.ArrayListUnmanaged;

const protobuf = @import("protobuf");
const ManagedString = protobuf.ManagedString;
const fd = protobuf.fd;

test {
    std.testing.refAllDeclsRecursive(@This());
}
/// import package tests
pub const fixedsizes_proto = @import("fixedsizes_proto");
/// import package vector_tile
pub const mapbox_proto = @import("mapbox_proto");
/// import package jspb.test
pub const jspb_proto = @import("jspb_proto");
/// import package protobuf_test_messages.proto3
const test_messages_proto3_proto = @import("test_messages_proto3_proto");
/// import package unittest
const unittest_proto = @import("unittest_proto");
/// import package graphics
const graphics_proto = @import("graphics_proto");
/// import package tests.oneof
const oneof_proto = @import("oneof_proto");
/// import package tests.longs
const msg_long_proto = @import("msg_long_proto");

pub const TopLevelEnum = enum(i32) {
    SE_ZERO = 0,
    SE2_ZERO = 3,
    SE2_ONE = 4,
    _,
};

pub const WithEnum = struct {
    value: WithEnum.SomeEnum = @enumFromInt(0),

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub const SomeEnum = enum(i32) {
        SE_ZERO = 0,
        SE_ONE = 1,
        A = 3,
        B = 4,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WithEnumShadow = struct {
    value: WithEnumShadow.SomeEnum = @enumFromInt(0),

    pub const _desc_table = .{
        .value = fd(1, .{ .Varint = .Simple }),
    };

    pub const SomeEnum = enum(i32) {
        SE_ZERO = 0,
        SE2_ZERO = 3,
        SE2_ONE = 4,
        _,
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const RepeatedEnum = struct {
    value: ArrayListU(TopLevelEnum) = .{},

    pub const _desc_table = .{
        .value = fd(1, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const Packed = struct {
    int32_list: ArrayListU(i32) = .{},
    uint32_list: ArrayListU(u32) = .{},
    sint32_list: ArrayListU(i32) = .{},
    float_list: ArrayListU(f32) = .{},
    double_list: ArrayListU(f64) = .{},
    int64_list: ArrayListU(i64) = .{},
    sint64_list: ArrayListU(i64) = .{},
    uint64_list: ArrayListU(u64) = .{},
    bool_list: ArrayListU(bool) = .{},
    enum_list: ArrayListU(TopLevelEnum) = .{},

    pub const _desc_table = .{
        .int32_list = fd(1, .{ .PackedList = .{ .Varint = .Simple } }),
        .uint32_list = fd(2, .{ .PackedList = .{ .Varint = .Simple } }),
        .sint32_list = fd(3, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .float_list = fd(4, .{ .PackedList = .{ .FixedInt = .I32 } }),
        .double_list = fd(5, .{ .PackedList = .{ .FixedInt = .I64 } }),
        .int64_list = fd(6, .{ .PackedList = .{ .Varint = .Simple } }),
        .sint64_list = fd(7, .{ .PackedList = .{ .Varint = .ZigZagOptimized } }),
        .uint64_list = fd(8, .{ .PackedList = .{ .Varint = .Simple } }),
        .bool_list = fd(9, .{ .PackedList = .{ .Varint = .Simple } }),
        .enum_list = fd(10, .{ .PackedList = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const UnPacked = struct {
    int32_list: ArrayListU(i32) = .{},
    uint32_list: ArrayListU(u32) = .{},
    sint32_list: ArrayListU(i32) = .{},
    float_list: ArrayListU(f32) = .{},
    double_list: ArrayListU(f64) = .{},
    int64_list: ArrayListU(i64) = .{},
    sint64_list: ArrayListU(i64) = .{},
    uint64_list: ArrayListU(u64) = .{},
    bool_list: ArrayListU(bool) = .{},
    enum_list: ArrayListU(TopLevelEnum) = .{},

    pub const _desc_table = .{
        .int32_list = fd(1, .{ .List = .{ .Varint = .Simple } }),
        .uint32_list = fd(2, .{ .List = .{ .Varint = .Simple } }),
        .sint32_list = fd(3, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .float_list = fd(4, .{ .List = .{ .FixedInt = .I32 } }),
        .double_list = fd(5, .{ .List = .{ .FixedInt = .I64 } }),
        .int64_list = fd(6, .{ .List = .{ .Varint = .Simple } }),
        .sint64_list = fd(7, .{ .List = .{ .Varint = .ZigZagOptimized } }),
        .uint64_list = fd(8, .{ .List = .{ .Varint = .Simple } }),
        .bool_list = fd(9, .{ .List = .{ .Varint = .Simple } }),
        .enum_list = fd(10, .{ .List = .{ .Varint = .Simple } }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WithSubmessages = struct {
    with_enum: ?*const WithEnum = null,

    pub const _desc_table = .{
        .with_enum = fd(1, .{ .AllocMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WithStrings = struct {
    name: ManagedString = .Empty,

    pub const _desc_table = .{
        .name = fd(1, .String),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WithRepeatedStrings = struct {
    name: ArrayListU(ManagedString) = .{},

    pub const _desc_table = .{
        .name = fd(1, .{ .List = .String }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};

pub const WithDeps = struct {
    fixed: ?*const fixedsizes_proto.FixedSizes = null,

    pub const _desc_table = .{
        .fixed = fd(1, .{ .AllocMessage = {} }),
    };

    pub usingnamespace protobuf.MessageMixins(@This());
};
